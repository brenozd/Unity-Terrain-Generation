#pragma kernel NoiseTexture2D
#pragma kernel NoiseTexture3D

RWStructuredBuffer<float> noiseValues;

float1 noiseScale;
int3 size;
float3 offset;

static int permutation[256] = 
{
    151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7,
    225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247,
    120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,
    88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134,
    139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220,
    105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80,
    73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86,
    164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38,
    147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189,
    28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101,
    155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232,
    178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12,
    191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181,
    199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236,
    205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180
};

static int PI = 3.141592653589793238462;

float1 CosineInterpolation(float a, float b, float x)
{
        float ft = x * PI;
        float f = (1.0 - cos(ft)) * 0.5;
        return (a * (1.0 - f) + b * f);
}

float1 LinearInterpolation(float1 a, float1 b, float1 x)
{
        return a + x * (b - a);
}

float1 fade(float1 t)
{
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}

float Grad(int hash, float x, float y)
{
    return ((hash & 1) == 0 ? x : -x) + ((hash & 2) == 0 ? y : -y);
}

float Grad(int hash, float x, float y, float z)
{
        int h = hash & 15;
        float u = h < 8 ? x : y;
        float v = h < 4 ? y : (h == 12 || h == 14 ? x : z);
        return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
}

float PerlinNoise2D(float x, float y)
{
    float _x = floor(x);
    float _y = floor(y);

    int _g0 = permutation[((((int)_x)     & 255) + 
              permutation[(  (int)_y)     & 255]) & 255];

    int _g1 = permutation[((((int)_x + 1) & 255) + 
              permutation[(  (int)_y)     & 255]) & 255];

    int _g2 = permutation[((((int)_x)     & 255) + 
              permutation[(  (int)_y + 1) & 255]) & 255];

    int _g3 = permutation[((((int)_x + 1) & 255) + 
              permutation[(  (int)_y + 1) & 255]) & 255];

    float a = CosineInterpolation(Grad(_g0, (x - _x),         (y - _y)),
                                  Grad(_g1, (x - (_x + 1.0)), (y - _y)),
                                  fade(x - _x));

    float b = CosineInterpolation(Grad(_g2, (x - _x),         (y - (_y + 1.0))),
                                  Grad(_g3, (x - (_x + 1.0)), (y - (_y + 1.0))),
                                  fade(x - _x));
    
    return (LinearInterpolation(a, b, fade(y - _y))+1.0)/2.0;
}

float PerlinNoise3D(float x, float y, float z)
{
    float _x = floor(x);
    float _y = floor(y);
    float _z = floor(z);

    int _g0 = permutation[(((int)(_x)     & 255) + (
              permutation[( (int)(_y)     & 255) +
              permutation[  (int)(_z)     & 255]])) & 255];

    int _g1 = permutation[(((int)(_x + 1) & 255) + (
              permutation[( (int)(_y)     & 255) +
              permutation[  (int)(_z)     & 255]])) & 255];   

    int _g2 = permutation[(((int)(_x)     & 255) + (
              permutation[( (int)(_y + 1) & 255) +
              permutation[  (int)(_z)     & 255]])) & 255];

    int _g3 = permutation[(((int)(_x + 1) & 255) + (
              permutation[( (int)(_y + 1) & 255) +
              permutation[  (int)(_z)     & 255]])) & 255];

    int _g4 = permutation[(((int)(_x)     & 255) + (
              permutation[( (int)(_y)     & 255) +
              permutation[  (int)(_z + 1) & 255]])) & 255];

    int _g5 = permutation[(((int)(_x + 1) & 255) + (
              permutation[( (int)(_y)     & 255) +
              permutation[  (int)(_z + 1) & 255]])) & 255];
    
    int _g6 = permutation[(((int)(_x)     & 255) + (
              permutation[( (int)(_y + 1) & 255) +
              permutation[  (int)(_z + 1) & 255]])) & 255];
    
    int _g7 = permutation[(((int)(_x + 1) & 255) + (
              permutation[( (int)(_y + 1) & 255) +
              permutation[  (int)(_z + 1) & 255]])) & 255];

    float a = CosineInterpolation(Grad(_g0, (x -  _x),        (y - _y),         (z -  _z)),
                                  Grad(_g1, (x - (_x + 1.0)), (y - _y),         (z -  _z)),
                                  fade(x - _x));

    float b = CosineInterpolation(Grad(_g2, (x -  _x),        (y - (_y + 1.0)), (z -  _z)),
                                  Grad(_g3, (x - (_x + 1.0)), (y - (_y + 1.0)), (z -  _z)),
                                  fade(x - _x));

    float c = CosineInterpolation(Grad(_g4, (x -  _x),        (y - (_y)),       (z - (_z + 1.0))),
                                  Grad(_g5, (x - (_x + 1.0)), (y - (_y)),       (z - (_z + 1.0))),
                                  fade(x - _x));

    float d = CosineInterpolation(Grad(_g6, (x -  _x),        (y - (_y + 1.0)), (z - (_z + 1.0))),
                                  Grad(_g7, (x - (_x + 1.0)), (y - (_y + 1.0)),  (z - (_z + 1.0))),
                                  fade(x - _x));
    
    float r = CosineInterpolation(a, b, fade(y - _y));
    float s = CosineInterpolation(c, d, fade(y - _y));

    return (LinearInterpolation(r, s, fade(z - _z))+1.0)/2;
}

[numthreads(16,16,1)]
void NoiseTexture2D (uint3 id : SV_DispatchThreadID)
{
    noiseValues[id.x*size.x + id.y] = PerlinNoise2D((float)id.x / size.x * noiseScale + offset.x, 
                                                    (float)id.y / size.y * noiseScale + offset.y);;
}

[numthreads(8,8,8)]
void NoiseTexture3D (uint3 id : SV_DispatchThreadID)
{
    noiseValues[id.x * size.x * size.y + id.y*size.y + id.z] = PerlinNoise3D((float)id.x / size.x * noiseScale + offset.x, 
                                                                             (float)id.y / size.y * noiseScale + offset.y,  
                                                                             (float)id.z / size.z * noiseScale + offset.z);;
}